--- a/chrome/browser/search/search.cc
+++ b/chrome/browser/search/search.cc
@@ -187,26 +187,7 @@ struct NewTabURLDetails {
                              : chrome::kChromeUINewTabPageThirdPartyURL);
 #endif
 
-    if (ShouldShowLocalNewTab(profile))
-      return NewTabURLDetails(local_url, NEW_TAB_URL_VALID);
-
-    const TemplateURL* template_url =
-        GetDefaultSearchProviderTemplateURL(profile);
-    if (!profile || !template_url)
-      return NewTabURLDetails(local_url, NEW_TAB_URL_BAD);
-
-    GURL search_provider_url(template_url->new_tab_url_ref().ReplaceSearchTerms(
-        TemplateURLRef::SearchTermsArgs(std::u16string()),
-        UIThreadSearchTermsData()));
-
-    if (!search_provider_url.is_valid())
-      return NewTabURLDetails(local_url, NEW_TAB_URL_NOT_SET);
-    if (!search_provider_url.SchemeIsCryptographic())
-      return NewTabURLDetails(local_url, NEW_TAB_URL_INSECURE);
-    if (!IsURLAllowedForSupervisedUser(search_provider_url, profile))
-      return NewTabURLDetails(local_url, NEW_TAB_URL_BLOCKED);
-
-    return NewTabURLDetails(search_provider_url, NEW_TAB_URL_VALID);
+    return NewTabURLDetails(local_url, NEW_TAB_URL_VALID);
   }
 
   const GURL url;
--- a/components/ntp_snippets/features.cc
+++ b/components/ntp_snippets/features.cc
@@ -40,7 +40,7 @@ const base::Feature* const kAllFeatures[
 
 BASE_FEATURE(kArticleSuggestionsFeature,
              "NTPArticleSuggestions",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kRemoteSuggestionsEmulateM58FetchingSchedule,
              "RemoteSuggestionsEmulateM58FetchingSchedule",
@@ -72,11 +72,11 @@ const char kNotificationsIgnoredLimitPar
 
 BASE_FEATURE(kKeepPrefetchedContentSuggestions,
              "KeepPrefetchedContentSuggestions",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kOptionalImagesEnabledFeature,
              "NTPRemoteSuggestionsOptionalImages",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             base::FEATURE_DISABLED_BY_DEFAULT);
 
 std::vector<const base::Feature*> GetAllFeatures() {
   // Skip the last feature as it's a nullptr.
